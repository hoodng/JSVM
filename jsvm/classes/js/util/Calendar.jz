$package("js.util");js.util.Calendar = function (year, month, dayOfMonth, hourOfDay, minute, second) {var CLASS = js.util.Calendar, thi$ = CLASS.prototype;if (CLASS.__defined__) {this._init.apply(this, arguments);return;}CLASS.__defined__ = true;var Class = js.lang.Class, System = J$VM.System;var ERA = CLASS.ERA = 0;var YEAR = CLASS.YEAR = 1;var MONTH = CLASS.MONTH = 2;var WEEK_OF_YEAR = CLASS.WEEK_OF_YEAR = 3;var WEEK_OF_MONTH = CLASS.WEEK_OF_MONTH = 4;var DATE = CLASS.DATE = 5;var DAY_OF_MONTH = CLASS.DAY_OF_MONTH = 5;var DAY_OF_YEAR = CLASS.DAY_OF_YEAR = 6;var DAY_OF_WEEK = CLASS.DAY_OF_WEEK = 7;var DAY_OF_WEEK_IN_MONTH = CLASS.DAY_OF_WEEK_IN_MONTH = 8;var AM_PM = CLASS.AM_PM = 9;var HOUR = CLASS.HOUR = 10;var HOUR_OF_DAY = CLASS.HOUR_OF_DAY = 11;var MINUTE = CLASS.MINUTE = 12;var SECOND = CLASS.SECOND = 13;var MILLISECOND = CLASS.MILLISECOND = 14;var ZONE_OFFSET = CLASS.ZONE_OFFSET = 15;var DST_OFFSET = CLASS.DST_OFFSET = 16;var SUNDAY = CLASS.SUNDAY = 0;var MONDAY = CLASS.MONDAY = 1;var TUESDAY = CLASS.TUESDAY = 2;var WEDNESDAY = CLASS.WEDNESDAY = 3;var THURSDAY = CLASS.THURSDAY = 4;var FRIDAY = CLASS.FRIDAY = 5;var SATURDAY = CLASS.SATURDAY = 6;var JANUARY = CLASS.JANUARY = 0;var FEBRUARY = CLASS.FEBRUARY = 1;var MARCH = CLASS.MARCH = 2;var APRIL = CLASS.APRIL = 3;var MAY = CLASS.MAY = 4;var JUNE = CLASS.JUNE = 5;var JULY = CLASS.JULY = 6;var AUGUST = CLASS.AUGUST = 7;var SEPTEMBER = CLASS.SEPTEMBER = 8;var OCTOBER = CLASS.OCTOBER = 9;var NOVEMBER = CLASS.NOVEMBER = 10;var DECEMBER = CLASS.DECEMBER = 11;var AM = CLASS.AM = 0;var PM = CLASS.PM = 1;var BC = CLASS.BC = 0;var AD = CLASS.AD = 1;var EPOCH_OFFSET = 719163;var EPOCH_YEAR = 1970;var MONTH_LENGTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];var LONTH_LENGTH = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];var QUATERS = [JANUARY, APRIL, JULY, OCTOBER];var ONE_SECOND = CLASS.ONE_SECOND = 1000;var ONE_MINUTE = CLASS.ONE_MINUTE = 60 * ONE_SECOND;var ONE_HOUR = CLASS.ONE_HOUR = 60 * ONE_MINUTE;var ONE_DAY = CLASS.ONE_DAY = 24 * ONE_HOUR;var ONE_WEEK = CLASS.ONE_WEEK = 7 * ONE_DAY;var MIN_VALUES = [BC, 1, JANUARY, 1, 0, 1, 1, SUNDAY, 1, AM, 0, 0, 0, 0, 0, -13 * ONE_HOUR, 0];var MAX_VALUES = [AD, 292278994, DECEMBER, 53, 6, 31, 366, SATURDAY, 6, PM, 11, 23, 59, 59, 999, 14 * ONE_HOUR, 2 * ONE_HOUR];thi$.getDate = function () {return this.date;};thi$.setDate = function (date) {this.date = date || new Date();};thi$.getTimeInMillis = function () {return this.date.getTime();};thi$.setTimeInMillis = function (millis) {this.date.setTime(millis);};thi$.getFirstDayOfWeek = function () {return this.firstDay;};thi$.setFirstDayOfWeek = function (day) {this.firstDay = day;};thi$.getMinimalDaysInFirstWeek = function () {return this.miniDays1stWeek;};thi$.setMinimalDaysInFirstWeek = function (days) {this.miniDays1stWeek = days;};thi$.getFirstDayOfCurrentYear = function () {return new Date(this.get(YEAR), JANUARY, 1);};thi$.getFirstDayOfCurrentMonth = function () {return new Date(this.get(YEAR), this.get(MONTH), 1);};thi$.getFirstDayOfCurrentQuarter = function () {month = QUATERS[Math.floor(this.get(MONTH) / 3)];return new Date(this.get(YEAR), month, 1);};thi$.getFirstDayOfCurrentWeek = function () {var calendar = new CLASS(this.get(YEAR), this.get(MONTH), this.get(DAY_OF_MONTH)), dayOfWeek = this.get(DAY_OF_WEEK);calendar.add(DAY_OF_MONTH, -dayOfWeek);return calendar.getDate();};thi$.get = function (field) {var date = this.date, val, t0, t1, dayOfWeekT0;switch (field) {case ERA:year = date.getFullYear();val = year > 0 ? AD : BC;break;case YEAR:val = date.getFullYear();break;case MONTH:val = date.getMonth();break;case WEEK_OF_YEAR:year = date.getFullYear();t0 = new Date(year, JANUARY, 1);t1 = new Date(year, date.getMonth(), date.getDate());dayOfWeekT0 = t0.getDay();val = Math.ceil(((t1 - t0) / ONE_DAY + dayOfWeekT0 + 1) / 7);break;case WEEK_OF_MONTH:year = date.getFullYear();month = date.getMonth();t0 = new Date(year, month, 1);t1 = new Date(year, month, date.getDate());dayOfWeekT0 = t0.getDay();val = Math.ceil(((t1 - t0) / ONE_DAY + dayOfWeekT0 + (dayOfWeekT0 == this.getFirstDayOfWeek() ? 1 : 0)) / 7);break;case DATE:case DAY_OF_MONTH:val = date.getDate();break;case DAY_OF_YEAR:year = date.getFullYear();t0 = new Date(year, JANUARY, 1);t1 = new Date(year, date.getMonth(), date.getDate());val = (t1 - t0) / ONE_DAY + 1;break;case DAY_OF_WEEK:val = date.getDay();break;case DAY_OF_WEEK_IN_MONTH:val = Math.ceil(date.getDate() / 7);break;case AM_PM:val = date.getHours() < 12 ? AM : PM;break;case HOUR:val = date.getHours() % 12;break;case HOUR_OF_DAY:val = date.getHours();break;case MINUTE:val = date.getMinutes();break;case SECOND:val = date.getSeconds();break;case MILLISECOND:val = date.getMilliseconds();break;case ZONE_OFFSET:val = date.getTimezoneOffset() * ONE_MINUTE;break;case DST_OFFSET:val = 0;break;default:throw "Unsupported field";}return val;};thi$.set = function (field, value) {if (!Class.isNumber(value)) {return;}var date = this.date, day = date.getDate(), t0, t1;switch (field) {case ERA:if (this.get(ERA) != value) {year = this.get(YEAR);this.set(YEAR, 1 - year);}break;case YEAR:if (value <= 0) {value = 9999;} else {value = (value > 9999 ? value - 9999 : value);}date.setFullYear(value);pinDayOfMonth.call(this, day);break;case MONTH:if (value >= JANUARY && value <= DECEMBER) {day = date.getDate();date.setDate(1);date.setMonth(value);pinDayOfMonth.call(this, day);}break;case WEEK_OF_YEAR:break;case WEEK_OF_MONTH:break;case DATE:case DAY_OF_MONTH:if (value >= 1 && value <= this.monthLength(this.get(MONTH), this.get(YEAR))) {date.setDate(value);}break;case DAY_OF_YEAR:year = date.getFullYear();if (value >= 1 && value < this.yearLength(year)) {t0 = new Date(year, JANUARY, 1);t1 = new Date(t0.getTime() + (value - 1) * ONE_DAY);this.set(DAY_OF_MONTH, t1.getDate());this.set(MONTH, t1.getMonth());}break;case DAY_OF_WEEK:break;case DAY_OF_WEEK_IN_MONTH:break;case AM_PM:if (this.get(AM_PM) != value) {if (AM == value) {this.set(HOUR_OF_DAY, this.get(HOUR_OF_DAY) - 12);} else {this.set(HOUR_OF_DAY, this.get(HOUR_OF_DAY) + 12);}}break;case HOUR:if (value >= 0 && value < 12) {date.setHours(value + 1);}break;case HOUR_OF_DAY:if (value >= 0 && value < 24) {date.setHours(value);}break;case MINUTE:if (value >= 0 && value < 60) {date.setMinutes(value);}break;case SECOND:if (value >= 0 && value < 60) {date.setSeconds(value);}break;case MILLISECOND:if (value >= 0 && value < 1000) {date.setMilliseconds(value);}break;case ZONE_OFFSET:case DST_OFFSET:break;default:throw "Unsupported field";}};thi$.setFields = function (year, month, date, hour, minute, second, mills) {this.set(YEAR, year);this.set(MONTH, month);this.set(DATE, date);this.set(HOUR_OF_DAY, hour);this.set(MINUTE, minute);this.set(SECOND, second);this.set(MILLISECOND, mills);};thi$.add = function (field, amount) {if (amount == 0) {return;}if (field < 0 || field >= ZONE_OFFSET) {throw "IllegalArgumentException " + field;}if (field == YEAR) {year = this.get(YEAR);if (this.get(ERA) == AD) {year += amount;if (year > 0) {this.set(YEAR, year);} else {this.set(YEAR, 1 - year);this.set(ERA, BC);}} else {year -= amount;if (year > 0) {this.set(YEAR, year);} else {this.set(YEAR, 1 - year);this.set(ERA, AD);}}} else {if (field == MONTH) {month = this.get(MONTH) + amount;year = this.get(YEAR);var y_amount = 0;if (month >= 0) {y_amount = Math.floor(month / 12);} else {y_amount = Math.ceil((month + 1) / 12) - 1;}if (y_amount != 0) {if (this.get(ERA) == AD) {year += y_amount;if (year > 0) {this.set(YEAR, year);} else {this.set(YEAR, 1 - year);this.set(ERA, BC);}} else {year -= y_amount;if (year > 0) {this.set(YEAR, year);} else {this.set(YEAR, 1 - year);this.set(ERA, AD);}}}if (month >= 0) {this.set(MONTH, (month % 12));} else {month %= 12;if (month < 0) {month += 12;}this.set(MONTH, JANUARY + month);}} else {if (field == ERA) {var era = this.get(ERA) + amount;if (era < 0) {era = 0;}if (era > 1) {era = 1;}this.set(ERA, era);} else {var delta = amount, timeOfDay = 0;switch (field) {case HOUR:case HOUR_OF_DAY:delta *= ONE_HOUR;break;case MINUTE:delta *= ONE_MINTUE;break;case SECOND:delta *= ONE_SECOND;break;case MILLISECOND:break;case WEEK_OF_YEAR:case WEEK_OF_MONTH:case DAY_OF_WEEK_IN_MONTH:delta *= 7;break;case DAY_OF_MONTH:case DAY_OF_YEAR:case DAY_OF_WEEK:break;case AM_PM:delta = amount / 2;timeOfDay = 12 * (amount % 2);break;}if (field >= HOUR) {this.setTimeInMillis(this.getTimeInMillis() + delta);return;}var curDay = new Date(this.get(YEAR), this.get(MONTH), this.get(DATE)), deltaDay = 0;timeOfDay += this.get(HOUR_OF_DAY);timeOfDay *= 60;timeOfDay += this.get(MINUTE);timeOfDay *= 60;timeOfDay += this.get(SECOND);timeOfDay *= 1000;timeOfDay += this.get(MILLISECOND);if (timeOfDay >= ONE_DAY) {deltaDay = 1;timeOfDay -= ONE_DAY;} else {if (timeOfDay < 0) {deltaDay = -1;timeOfDay += ONE_DAY;}}deltaDay += delta;this.setTimeInMillis(curDay.getTime() + deltaDay * ONE_DAY + timeOfDay);}}}};var pinDayOfMonth = function (dom) {var year = this.get(YEAR), monthLen = this.monthLength(this.get(MONTH), year);dom = dom || this.get(DAY_OF_MONTH);if (dom > monthLen) {this.set(DAY_OF_MONTH, monthLen);} else {this.set(DAY_OF_MONTH, dom);}};thi$.yearLength = function (year) {return this.isLeapYear(_reviseYear.call(this, year)) ? 366 : 365;};thi$.monthLength = function (month, year) {return this.isLeapYear(_reviseYear.call(this, year)) ? LONTH_LENGTH[month] : MONTH_LENGTH[month];};var _reviseYear = function (year) {year = year || this.get(YEAR);if (this.get(ERA) == BC) {year = 1 - year;}return year;};thi$.isLeapYear = function (year) {year = Class.isNumber(year) ? year : this.get(YEAR);return (year % 4 == 0 || year % 400 == 0) && year % 100 != 0 && year % 1900 != 0;};thi$.clear = function (field) {var date = this.date;switch (field) {case ERA:break;case YEAR:date.setFullYear(EPOCH_YEAR);break;case MONTH:date.setMonth(JANUARY);break;case WEEK_OF_YEAR:case WEEK_OF_MONTH:break;case DATE:case DAY_OF_MONTH:date.setDate(1);break;case DAY_OF_YEAR:break;case DAY_OF_WEEK:case DAY_OF_WEEK_IN_MONTH:break;case AM_PM:break;case HOUR:break;case HOUR_OF_DAY:date.setHours(0);break;case MINUTE:date.setMinutes(0);break;case SECOND:date.setSeconds(0);break;case MILLISECOND:date.setMilliseconds(0);break;case ZONE_OFFSET:case DST_OFFSET:break;default:date.setFullYear(EPOCH_YEAR);date.setMonth(JANUARY);date.setDate(1);date.setHours(0);date.setMinutes(0);date.setSeconds(0);date.setMilliseconds(0);}};CLASS.rangeOf = function (from, to, field, unit) {var t0 = new CLASS(from), t1 = new CLASS(to), size = 2, firstDay, tmp;switch (field) {case YEAR:if (t0.get(MONTH) != JANUARY || t0.get(DAY_OF_MONTH) != 1) {from = t0.getFirstDayOfCurrentYear();}if (t1.get(MONTH) != JANUARY || t1.get(DAY_OF_MONTH) != 1) {to = t1.getFirstDayOfCurrentYear();}if (from > to) {tmp = from;from = to;to = tmp;}size = from.getFullYear() - to.getFullYear() + 1;size = Math.ceil(size / unit);break;case MONTH:if (t0.get(DAY_OF_MONTH) != 1) {from = t0.getFirstDayOfCurrentMonth();}if (t1.get(DAY_OF_MONTH) != 1) {to = t1.getFirstDayOfCurrentMonth();}if (from > to) {tmp = from;from = to;to = tmp;}size = (to.getFullYear() - from.getFullYear()) * 12 + to.getMonth() - from.getMonth() + 1;size = Math.ceil(size / unit);break;case WEEK_OF_YEAR:firstDay = this.getFirstDayOfWeek();if (t0.get(DAY_OF_WEEK) != firstDay) {from = t0.getFirstDayOfCurrentWeek();}if (t1.get(DAY_OF_WEEK) != firstDay) {to = t1.getFirstDayOfCurrentWeek();}if (from > to) {tmp = from;from = to;to = tmp;}size = ((to - from) / ONE_DAY) / 7 + 1;size = Math.ceil(size / unit);break;case DAY_OF_YEAR:break;case HOUR_OF_DAY:break;case MINUTE:break;case SECOND:break;default:break;}return {from:from, to:to, field:field, unit:unit, size:size};};CLASS.compareDate = function (date0, date1) {var v0 = new Date(date0.getFullYear(), date0.getMonth(), date0.getDate());var v1 = new Date(date1.getFullYear(), date1.getMonth(), date1.getDate());return v0 - v1;};CLASS.compareTime = function (date0, date1) {var v0 = new Date(1970, 1, 1, date0.getHours(), date0.getMinutes(), date0.getSeconds(), date0.getMilliseconds());var v1 = new Date(1970, 1, 1, date1.getHours(), date1.getMinutes(), date1.getSeconds(), date1.getMilliseconds());return v0 - v1;};CLASS.compareDateTime = function (v0, v1) {return v0 - v1;};thi$._init = function () {if (arguments.length == 0) {this.date = new Date();} else {if (Class.isDate(arguments[0])) {this.date = arguments[0];} else {this.date = new Date();this.clear();this.setFields(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5], arguments[6]);}}this.setFirstDayOfWeek(SUNDAY);this.setMinimalDaysInFirstWeek(1);};thi$._init.apply(this, arguments);}.$extend(js.lang.Object);