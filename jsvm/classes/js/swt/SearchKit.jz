$package("js.swt");js.swt.SearchKit = function () {};js.swt.SearchKit.buildRegExp = function (keyword, mode) {if (!keyword || keyword.length == 0) {return null;}keyword = (js.lang.Class.forName("js.lang.String")).escapeRegExp(keyword);if (mode.indexOf("wholeword") >= 0) {keyword = "\\b" + keyword + "\\b";}var reopts = "";if (mode.indexOf("global") >= 0) {reopts += "g";}if (mode.indexOf("ignore") >= 0) {reopts += "i";}var regExp = new RegExp(keyword, reopts);return regExp;};js.swt.SearchKit.search = function (textSet, keyword, mode) {var _ = js.swt.SearchKit;var pattern = _.buildRegExp(keyword, mode);return _.searchByPattern(textSet, pattern);};js.swt.SearchKit.searchByPattern = function (textSet, pattern) {var len = textSet ? textSet.length : 0, matches, text, textMatches;if (len == 0) {return null;}matches = new js.util.HashMap();for (var i = 0; i < len; i++) {text = textSet[i];textMatches = js.swt.SearchKit.searchInTextByPattern(text, pattern);if (textMatches && textMatches.length > 0) {matches.put(i, textMatches);}}return {pattern:pattern, matches:matches};};js.swt.SearchKit.searchInText = function (text, keyword, mode) {var _ = js.swt.SearchKit;var pattern = _.buildRegExp(keyword, mode);return _.searchInTextByPattern(text, pattern);};js.swt.SearchKit.searchInTextByPattern = function (text, pattern) {if (!text || (text.length == 0) || !pattern) {return null;}if (!(pattern instanceof RegExp)) {throw new Error("The pattern is not a valid RegExp.");}var matches = [];text.replace(pattern, function (m, i) {matches.push({start:i, length:m.length});});return matches;};