$package("js.awt");js.awt.Grid = function (def) {var CLASS = js.awt.Grid, thi$ = CLASS.prototype;if (CLASS.__defined__) {this._init.apply(this, arguments);return;}CLASS.__defined__ = true;var Class = js.lang.Class, Object = js.lang.Object, System = J$VM.System;thi$.rowNum = function () {return this.rows.length;};thi$.colNum = function () {return this.cols.length;};thi$.row = function (index) {return this.rows[index];};thi$.column = function (index) {return this.cols[index];};thi$.cell = function (rowIndex, colIndex) {return this.acells[rowIndex][colIndex];};thi$.extractCells = function (force) {var cells = (force === true) ? null : this.cells;if (!Class.isArray(cells)) {cells = [];var acells = this.acells, rowNum = this.rowNum(), colNum = this.colNum(), i, j, cell;for (i = 0; i < rowNum; i++) {for (j = 0; j < colNum; j++) {cell = acells[i][j];if (Class.isObject(cell)) {cell.rowIndex = i;cell.colIndex = j;cells.push(cell);}}}this.cells = cells;}return cells;};thi$.expandCells = function (force) {var acells = (force === true) ? null : this.acells;if (!Class.isArray(acells)) {var rowNum = this.rowNum(), colNum = this.colNum(), cells = this.cells, cell, i, ilen;acells = new Array(rowNum);for (i = 0; i < rowNum; i++) {acells[i] = new Array(colNum);}for (i = 0, ilen = cells.length; i < ilen; i++) {cell = cells[i];acells[cell.rowIndex][cell.colIndex] = cell;}this.acells = acells;}return acells;};thi$.rowAttrs = function (index, attrs) {_dimAttrs.call(this, this.rows, index, attrs);};thi$.colAttrs = function (index, attrs) {_dimAttrs.call(this, this.cols, index, attrs);};var _dimAttrs = function (dims, index, attrs) {var dim, p;if (Class.isObject(attrs) && (index >= 0 && index < dims.length)) {dim = dims[index];for (p in attrs && attrs.hasOwnProperty(p)) {switch (p) {case "rigid":if (dim.rigid !== attrs.rigid) {dim.rigid = attrs.rigid;dims.dirty |= 1;}break;case "visible":if (dim.visible !== attrs.visible) {dim.visible = attrs.visible;dims.dirty |= 1;}break;default:dim[p] = attrs[p];}}}};var _mergeArea = function (set, index, area, isV) {var preIndex, preArea, nextIndex, nextArea, p0, p1;for (var i = index; i >= 0; i--) {preArea = set[i];if (preArea) {preIndex = i;break;}}for (var j = index + 1, len = set.length; j < len; j--) {nextArea = set[j];if (nextArea) {nextIndex = j;break;}}p0 = isV ? "y0" : "x0";p1 = isV ? "y1" : "x1";if ((preArea && preArea[p0] <= area[p0] && preArea[p1] >= area[p1])) {} else {if (preArea && preArea[p1] >= area[p0] && nextArea && nextArea[p0] <= area[p1]) {preArea[p1] = nextArea[p1];set.splice(nextIndex, 1);} else {if (preArea && preArea[p1] >= area[p0]) {preArea[p1] = area[p1];} else {if (nextArea && nextArea[p0] <= area[p1]) {area[p1] = nextArea[p1];set.splice(nextIndex, 1);set[index] = area;} else {set[index] = area;}}}}return set;};var _getLineMatrix = function (lineMatrixes, cell) {var rIndex = cell.rowIndex, cIndex = cell.colIndex, hlines = lineMatrixes.hlines, vlines = lineMatrixes.vlines, rowSpan = cell.rowSpan, colSpan = cell.colSpan, x0 = cell.x, x1 = x0 + cell.width, y0 = cell.y, y1 = y0 + cell.height, index, hline, vline, xs, ys;index = rIndex;hline = hlines[index] = hlines[index] || {y:y0, xs:[]};xs = hline.xs;_mergeArea.call(this, xs, cIndex, {x0:x0, x1:x1}, false);index = rIndex + rowSpan;hline = hlines[index] = hlines[index] || {y:y1, xs:[]};xs = hline.xs;_mergeArea.call(this, xs, cIndex, {x0:x0, x1:x1}, false);index = cIndex;vline = vlines[index] = vlines[index] || {x:x0, ys:[]};ys = vline.ys;_mergeArea.call(this, ys, rIndex, {y0:y0, y1:y1}, true);index = cIndex + colSpan;vline = vlines[index] = vlines[index] || {x:x1, ys:[]};ys = vline.ys;_mergeArea.call(this, ys, rIndex, {y0:y0, y1:y1}, true);};thi$.getLineMatrixes = function (force) {var lineMatrixes = this.lineMatrixes, cells = this.extractCells();if (force !== true && lineMatrixes) {return lineMatrixes;}lineMatrixes = this.lineMatrixes = {hlines:[], vlines:[]};for (var i = 0, len = cells.length; i < len; i++) {_getLineMatrix.call(this, lineMatrixes, cells[i]);}return lineMatrixes;};thi$.layout = function (xbase, ybase, width, height) {this.update();_calcDimsMeasure.call(this, this.rows, ybase, height);_calcDimsMeasure.call(this, this.cols, xbase, width);_calcCellsMeasure.call(this);delete this.lineMatrixes;};thi$.update = function () {if (this.rows.dirty & 1 !== 0) {_adjustWeight.call(this, this.rows);}if (this.cols.dirty & 1 !== 0) {_adjustWeight.call(this, this.cols);}if (this.acells) {this.extractCells(true);}};var _adjustWeight = function (dims) {var dim, i, len, weight = 1, v, tmps = [];for (i = 0, len = dims.length; i < len; i++) {dim = dims[i];if (!dim.rigid && dim.visible) {v = dim.weight;if (Class.isNumber(v)) {weight -= v;} else {tmps.push(dim);}}}if (tmps.length > 0) {weight /= tmps.length;while (tmps.length > 0) {tmps.shift().weight = weight;}}dims.dirty &= ~1;};var _initDims = function (dims, dimDefs) {var dlen = dims.length, dimDef, dim, i, len, index, v;dims.dirty = 0;if (Class.isArray(dimDefs)) {for (i = 0, len = dimDefs.length; i < len; i++) {dimDef = dimDefs[i];index = dimDef.index;if (index >= 0 && index < dlen) {v = dimDef.measure;dims[index] = {visible:!(dimDef.visible === false), measure:Class.isNumber(v) ? v : 0, weight:dimDef.weight, rigid:(dimDef.rigid === true)};}}}for (i = 0; i < dlen; i++) {dim = dims[i];if (dim === undefined) {dim = dims[i] = {visible:true, rigid:false};}}_adjustWeight.call(this, dims);};var _initCells = function (cells, cellDefs) {var rows = this.rows, cols = this.cols, m = rows.length, n = cols.length, cellDef, cell, i, j, len, rspan, cspan, pt, pr, pb, pl, ri, cj, visible, padding = this.cellpadding;if (Class.isArray(cellDefs)) {for (i = 0, len = cellDefs.length; i < len; i++) {cellDef = cellDefs[i];ri = cellDef.rowIndex, cj = cellDef.colIndex;if (ri >= 0 && ri < m && cj >= 0 && cj < n) {rspan = cellDef.rowSpan;cspan = cellDef.colSpan;pt = cellDef.paddingTop;pr = cellDef.paddingRight;pb = cellDef.paddingBottom;pl = cellDef.paddingLeft;cells[ri][cj] = {rowSpan:Class.isNumber(rspan) ? rspan : 1, colSpan:Class.isNumber(cspan) ? cspan : 1, paddingTop:Class.isNumber(pt) ? pt : padding[0], paddingRight:Class.isNumber(pr) ? pr : padding[1], paddingBottom:Class.isNumber(pb) ? pb : padding[2], paddingLeft:Class.isNumber(pl) ? pl : padding[3]};}}}for (i = 0; i < m; i++) {for (j = 0; j < n; j++) {cell = cells[i][j];if (cell === null) {continue;}if (cell === undefined) {cell = cells[i][j] = {rowSpan:1, colSpan:1, paddingTop:padding[0], paddingRight:padding[1], paddingBottom:padding[2], paddingLeft:padding[3]};}visible = false;rspan = cell.rowSpan - 1;while (rspan >= 0) {cspan = cell.colSpan - 1;while (cspan >= 0) {if (rspan != 0 || cspan != 0) {ri = i + rspan;cj = j + cspan;cells[ri][cj] = null;visible = visible || (rows[ri].visible && cols[cj].visible);}cspan--;}rspan--;}cell.visible = (visible || (rows[i].visible && cols[j].visible));}}};var _calcDimsMeasure = function (dims, base, total) {var dim, i, len = dims.length, tmps = [];for (i = 0; i < len; i++) {dim = dims[i];if (!dim.visible) {continue;}if (dim.rigid) {total -= dim.measure;} else {tmps.push(dim);}}var rest = total, v;while (tmps.length > 0) {dim = tmps.shift();v = Math.round(total * dim.weight);rest -= v;dim.measure = v;}if (Class.isNumber(v)) {dim.measure = (v + rest);}for (i = 0; i < len; i++) {dim = dims[i];dim.offset = base;base += dim.visible ? dim.measure : 0;}};var _calcCellsMeasure = function () {var cells = this.extractCells(), cell, dim, span, offset, v, i, j, len;for (i = 0, len = cells.length; i < len; i++) {cell = cells[i];offset = -1;v = 0;span = cell.colSpan;for (j = 0; j < span; j++) {dim = this.column(cell.colIndex + j);if (dim.visible === true) {v += dim.measure;if (offset < 0) {offset = dim.offset;}}}cell.x = offset;cell.width = v;cell.innerWidth = v - cell.paddingLeft - cell.paddingRight;offset = -1;v = 0;span = cell.rowSpan;for (j = 0; j < span; j++) {dim = this.row(cell.rowIndex + j);if (dim.visible === true) {v += dim.measure;if (offset < 0) {offset = dim.offset;}}}cell.y = offset;cell.height = v;cell.innerHeight = v - cell.paddingTop - cell.paddingBottom;}};thi$._init = function (def) {if (def == undefined) {return;}var m, n;this.cellpadding = def.cellpadding || [0, 0, 0, 0];m = def.rowNum;m = Class.isNumber(m) ? (m > 0 ? m : 1) : 1;this.rows = new Array(m);_initDims.call(this, this.rows, def.rows);n = def.colNum;n = Class.isNumber(n) ? (n > 0 ? n : 1) : 1;this.cols = new Array(n);_initDims.call(this, this.cols, def.cols);this.acells = new Array(m);for (var i = 0; i < m; i++) {this.acells[i] = new Array(n);}_initCells.call(this, this.acells, def.cells);};this._init.apply(this, arguments);}.$extend(js.lang.Object);