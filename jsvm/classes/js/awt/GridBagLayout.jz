$package("js.awt");js.awt.GridBagLayout = function (def) {var CLASS = js.awt.GridBagLayout, thi$ = CLASS.prototype;if (CLASS.__defined__) {this._init.apply(this, arguments);return;}var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;CLASS.__defined__ = true;CLASS.__MINSIZE__ = 1;CLASS.__PREFERREDSIZE__ = 2;CLASS.__EMPIRICMULTIPLIER__ = 2;var GridBagConstraints = js.awt.GridBagConstraints;thi$.addLayoutComponent = function (comp, constraints) {arguments.callee.__super__.apply(this, arguments);}.$override(this.addLayoutComponent);thi$.removeLayoutComponent = function (comp) {}.$override(this.removeLayoutComponent);thi$.invalidateLayout = function (container) {}.$override(this.invalidateLayout);var _locateComponents = function (container) {var box = container.getBounds();var info = _getLayoutInfo.call(this, container, CLASS.__PREFERREDSIZE__);var i, t = 0, diffw, diffh;var components = container.getAllComponents();var compX, compY, compWidth, compHeight, weight, m, comp;for (i = 0; i < info.width; i++) {t += info.minWidth[i];}compWidth = t;t = 0;for (i = 0; i < info.height; i++) {t += info.minHeight[i];}compHeight = t;if (box.innerWidth < compWidth || box.innerHeight < compHeight) {t = 0;info = _getLayoutInfo.call(this, container, CLASS.__MINSIZE__);for (i = 0; i < info.width; i++) {t += info.minWidth[i];}compWidth = t;t = 0;for (i = 0; i < info.height; i++) {t += info.minHeight[i];}compHeight = t;}diffw = box.innerWidth - compWidth;if (diffw != 0) {weight = 0;for (i = 0; i < info.width; i++) {weight += info.weightX[i];}if (weight > 0) {for (i = 0; i < info.width; i++) {var dx = Math.round((diffw * info.weightX[i]) / weight);info.minWidth[i] += dx;compWidth += dx;if (info.minWidth[i] < 0) {compWidth -= info.minWidth[i];info.minWidth[i] = 0;}}}diffw = box.innerWidth - compWidth;} else {diffw = 0;}diffh = box.innerHeight - compHeight;if (diffh != 0) {weight = 0;for (i = 0; i < info.height; i++) {weight += info.weightY[i];}if (weight > 0) {for (i = 0; i < info.height; i++) {var dy = Math.round((diffh * info.weightY[i]) / weight);info.minHeight[i] += dy;compHeight += dy;if (info.minHeight[i] < 0) {compHeight -= info.minHeight[i];info.minHeight[i] = 0;}}}diffh = box.innerHeight - compHeight;} else {diffh = 0;}for (m = 0; m < components.length; m++) {comp = components[m];if (!comp.isVisible()) {continue;}var constraints = comp.def.constraints;compX = info.startx;for (i = 0; i < constraints.tempX; i++) {compX += info.minWidth[i];}compY = info.starty;for (i = 0; i < constraints.tempY; i++) {compY += info.minHeight[i];}compWidth = 0;for (i = constraints.tempX; i < (constraints.tempX + constraints.tempWidth); i++) {compWidth += info.minWidth[i];}compHeight = 0;for (i = constraints.tempY; i < (constraints.tempY + constraints.tempHeight); i++) {compHeight += info.minHeight[i];}var diffx, diffy;var cellY = compY;var cellHeight = compHeight;compX += constraints.insets.left;compWidth -= (constraints.insets.left + constraints.insets.right);compY += constraints.insets.top;compHeight -= (constraints.insets.top + constraints.insets.bottom);diffx = 0;if ((constraints.fill != GridBagConstraints.__horizontal__ && constraints.fill != GridBagConstraints.__both__) && (compWidth > (constraints.minWidth + constraints.ipadx))) {diffx = compWidth - (constraints.minWidth + constraints.ipadx);compWidth = constraints.minWidth + constraints.ipadx;}diffy = 0;if ((constraints.fill != GridBagConstraints.__vertical__ && constraints.fill != GridBagConstraints.__both__) && (compHeight > (constraints.minHeight + constraints.ipady))) {diffy = compHeight - (constraints.minHeight + constraints.ipady);compHeight = constraints.minHeight + constraints.ipady;}switch (constraints.anchor) {case GridBagConstraints.__center__:compX += diffx / 2;compY += diffy / 2;break;case GridBagConstraints.__page_start__:case GridBagConstraints.__north__:compX += diffx / 2;break;case GridBagConstraints.__northeast__:case GridBagConstraints.__first_line_end__:compX += diffx;break;case GridBagConstraints.__east__:case GridBagConstraints.__line_end__:compX += diffx;compY += diffy / 2;break;case GridBagConstraints.__southeast__:case GridBagConstraints.__last_line_end__:compX += diffx;compY += diffy;break;case GridBagConstraints.__page_end__:case GridBagConstraints.__south__:compX += diffx / 2;compY += diffy;break;case GridBagConstraints.__southwest__:case GridBagConstraints.__last_line_start__:compY += diffy;break;case GridBagConstraints.__west__:case GridBagConstraints.__line_start__:compY += diffy / 2;break;default:throw "unsupported anchor value";}if (compX < 0) {compWidth += compX;compX = 0;}if (compY < 0) {compHeight += compY;compY = 0;}if ((compWidth <= 0) || (compHeight <= 0)) {comp.setBounds(0, 0, 0, 0, 3);} else {if (comp.def.x != compX || comp.def.y != compY || comp.def.width != compWidth || comp.def.height != compHeight) {comp.setBounds(compX, compY, compWidth, compHeight, 3);}}}};var _getLayoutInfo = function (container, sizeFlag) {var constraints, layoutWidth = layoutHeight = 0, curRow = curCol = -1, nextSize;var components = container.getAllComponents();var curX, curY, curWidth, curHeight, preMaximumArrayXIndex = preMaximumArrayYIndex = 0;var maximumArrayXIndex = maximumArrayYIndex = 0;var xMaxArray, yMaxArray;for (i = 0; i < components.length; i++) {comp = components[i];if (!comp.isVisible()) {continue;}constraints = comp.def.constraints;curX = constraints.gridx;curY = constraints.gridy;curWidth = constraints.gridwidth;curHeight = constraints.gridheight;if (curX < 0) {curX = ++preMaximumArrayYIndex;}if (curY < 0) {curY = ++preMaximumArrayXIndex;}if (curWidth <= 0) {curWidth = 1;}if (curHeight <= 0) {curHeight = 1;}preMaximumArrayXIndex = Math.max(curY + curHeight, preMaximumArrayXIndex);preMaximumArrayYIndex = Math.max(curX + curWidth, preMaximumArrayYIndex);}maximumArrayXIndex = (CLASS.__EMPIRICMULTIPLIER__ * preMaximumArrayXIndex > Number.MAX_VALUE) ? Number.MAX_VALUE : CLASS.__EMPIRICMULTIPLIER__ * preMaximumArrayXIndex;maximumArrayYIndex = (CLASS.__EMPIRICMULTIPLIER__ * preMaximumArrayYIndex > Number.MAX_VALUE) ? Number.MAX_VALUE : CLASS.__EMPIRICMULTIPLIER__ * preMaximumArrayYIndex;xMaxArray = new Array(maximumArrayXIndex);yMaxArray = new Array(maximumArrayYIndex);for (m = 0; m < components.length; m++) {comp = components[m];if (!comp.isVisible()) {continue;}constraints = comp.def.constraints;curX = constraints.gridx;curY = constraints.gridy;curWidth = constraints.gridwidth;if (curWidth <= 0) {curWidth = 1;}curHeight = constraints.gridheight;if (curHeight <= 0) {curHeight = 1;}if (curX < 0 && curY < 0) {if (curRow >= 0) {curY = curRow;} else {if (curCol >= 0) {curX = curCol;} else {curY = 0;}}}if (curX < 0) {px = 0;for (i = curY; i < (curY + curHeight); i++) {px = Math.max(px, xMaxArray[i]);}curX = px - curX - 1;if (curX < 0) {curX = 0;}} else {if (curY < 0) {py = 0;for (i = curX; i < (curX + curWidth); i++) {py = Math.max(py, yMaxArray[i]);}curY = py - curY - 1;if (curY < 0) {curY = 0;}}}px = curX + curWidth;if (layoutWidth < px) {layoutWidth = px;}py = curY + curHeight;if (layoutHeight < py) {layoutHeight = py;}for (i = curX; i < (curX + curWidth); i++) {yMaxArray[i] = py;}for (i = curY; i < (curY + curHeight); i++) {xMaxArray[i] = px;}if (sizeFlag === CLASS.__PREFERREDSIZE__) {d = comp.getPreferredSize();constraints.minWidth = d.width;constraints.minHeight = d.height;}constraints.ascent = -1;if (constraints.gridheight == 0 && constraints.gridwidth == 0) {curRow = curCol = -1;}if (constraints.gridheight == 0 && curRow < 0) {curCol = curX + curWidth;} else {if (constraints.gridwidth == 0 && curCol < 0) {curRow = curY + curHeight;}}}if (sizeFlag === CLASS.__MINSIZE__) {var bounds = container.getBounds();var cellWidth = Math.round(bounds.innerWidth / layoutWidth);var cellHeight = Math.round(bounds.innerHeight / layoutHeight);for (m = 0; m < components.length; m++) {comp = components[m];if (!comp.isVisible()) {continue;}constraints = comp.def.constraints;constraints.minWidth = cellWidth;constraints.minHeight = cellHeight;}}var layoutInfo = new js.awt.GridBagLayoutInfo(layoutWidth, layoutHeight);curRow = curCol = -1;xMaxArray = new Array(maximumArrayXIndex);yMaxArray = new Array(maximumArrayYIndex);for (m = 0; m < components.length; m++) {comp = components[m];if (!comp.isVisible()) {continue;}constraints = comp.def.constraints;curX = constraints.gridx;curY = constraints.gridy;curWidth = constraints.gridwidth;curHeight = constraints.gridheight;if (curX < 0 && curY < 0) {if (curRow >= 0) {curY = curRow;} else {if (curCol >= 0) {curX = curCol;} else {curY = 0;}}}if (curX < 0) {if (curHeight <= 0) {curHeight += layoutInfo.height - curY;if (curHeight < 1) {curHeight = 1;}}px = 0;for (i = curY; i < (curY + curHeight); i++) {px = Math.max(px, xMaxArray[i]);}curX = px - curX - 1;if (curX < 0) {curX = 0;}} else {if (curY < 0) {if (curWidth <= 0) {curWidth += layoutInfo.width - curX;if (curWidth < 1) {curWidth = 1;}}py = 0;for (i = curX; i < (curX + curWidth); i++) {py = Math.max(py, yMaxArray[i]);}curY = py - curY - 1;if (curY < 0) {curY = 0;}}}if (curWidth <= 0) {curWidth += layoutInfo.width - curX;if (curWidth < 1) {curWidth = 1;}}if (curHeight <= 0) {curHeight += layoutInfo.height - curY;if (curHeight < 1) {curHeight = 1;}}px = curX + curWidth;py = curY + curHeight;for (i = curX; i < (curX + curWidth); i++) {yMaxArray[i] = py;}for (i = curY; i < (curY + curHeight); i++) {xMaxArray[i] = px;}if (constraints.gridheight == 0 && constraints.gridwidth == 0) {curRow = curCol = -1;}if (constraints.gridheight == 0 && curRow < 0) {curCol = curX + curWidth;} else {if (constraints.gridwidth == 0 && curCol < 0) {curRow = curY + curHeight;}}constraints.tempX = curX;constraints.tempY = curY;constraints.tempWidth = curWidth;constraints.tempHeight = curHeight;anchor = constraints.anchor;}layoutInfo.weightX = new Array(maximumArrayYIndex);layoutInfo.weightY = new Array(maximumArrayXIndex);layoutInfo.minWidth = new Array(maximumArrayYIndex);layoutInfo.minHeight = new Array(maximumArrayXIndex);for (i = 0; i < maximumArrayYIndex; i++) {layoutInfo.weightX[i] = 0;layoutInfo.minWidth[i] = 0;}for (i = 0; i < maximumArrayXIndex; i++) {layoutInfo.weightY[i] = 0;layoutInfo.minHeight[i] = 0;}var MAX_INT = 2147483647;nextSize = MAX_INT;for (i = 1; i != MAX_INT; i = nextSize, nextSize = MAX_INT) {for (m = 0; m < components.length; m++) {comp = components[m];if (!comp.isVisible()) {continue;}constraints = comp.def.constraints;if (constraints.tempWidth == i) {px = constraints.tempX + constraints.tempWidth;weight_diff = constraints.weightx;for (k = constraints.tempX; k < px; k++) {weight_diff -= layoutInfo.weightX[k];}if (weight_diff > 0) {weight = 0;for (k = constraints.tempX; k < px; k++) {weight += layoutInfo.weightX[k];}for (k = constraints.tempX; weight > 0 && k < px; k++) {var wt = layoutInfo.weightX[k];var dx = (wt * weight_diff) / weight;layoutInfo.weightX[k] += dx;weight_diff -= dx;weight -= wt;}layoutInfo.weightX[px - 1] += weight_diff;}pixels_diff = constraints.minWidth + constraints.ipadx + constraints.insets.left + constraints.insets.right;for (k = constraints.tempX; k < px; k++) {pixels_diff -= layoutInfo.minWidth[k];}if (pixels_diff > 0) {weight = 0;for (k = constraints.tempX; k < px; k++) {weight += layoutInfo.weightX[k];}for (k = constraints.tempX; weight > 0 && k < px; k++) {var wt = layoutInfo.weightX[k];var dx = (wt * pixels_diff) / weight;layoutInfo.minWidth[k] += dx;pixels_diff -= dx;weight -= wt;}layoutInfo.minWidth[px - 1] += pixels_diff;}} else {if (constraints.tempWidth > i && constraints.tempWidth < nextSize) {nextSize = constraints.tempWidth;}}if (constraints.tempHeight == i) {py = constraints.tempY + constraints.tempHeight;weight_diff = constraints.weighty;for (k = constraints.tempY; k < py; k++) {weight_diff -= layoutInfo.weightY[k];}if (weight_diff > 0) {weight = 0;for (k = constraints.tempY; k < py; k++) {weight += layoutInfo.weightY[k];}for (k = constraints.tempY; weight > 0 && k < py; k++) {var wt = layoutInfo.weightY[k];var dy = (wt * weight_diff) / weight;layoutInfo.weightY[k] += dy;weight_diff -= dy;weight -= wt;}layoutInfo.weightY[py - 1] += weight_diff;}pixels_diff = -1;if (pixels_diff == -1) {pixels_diff = constraints.minHeight + constraints.ipady + constraints.insets.top + constraints.insets.bottom;}for (k = constraints.tempY; k < py; k++) {pixels_diff -= layoutInfo.minHeight[k];}if (pixels_diff > 0) {weight = 0;for (k = constraints.tempY; k < py; k++) {weight += layoutInfo.weightY[k];}for (k = constraints.tempY; weight > 0 && k < py; k++) {var wt = layoutInfo.weightY[k];var dy = (wt * pixels_diff) / weight;layoutInfo.minHeight[k] += dy;pixels_diff -= dy;weight -= wt;}layoutInfo.minHeight[py - 1] += pixels_diff;var t = py - 1;}} else {if (constraints.tempHeight > i && constraints.tempHeight < nextSize) {nextSize = constraints.tempHeight;}}}}return layoutInfo;};thi$.layoutContainer = function (container) {_locateComponents.call(this, container);}.$override(this.layoutContainer);thi$._init = function (def) {def = def || {};def.classType = "js.awt.GridBagLayout";arguments.callee.__super__.apply(this, arguments);}.$override(this._init);this._init.apply(this, arguments);}.$extend(js.awt.AbstractLayout);js.awt.GridBagConstraints = function (gridx, gridy, gridwidth, gridheight, weightx, weighty, ipadx, ipady, anchor, fill, insets) {var CLASS = js.awt.GridBagConstraints, thi$ = CLASS.prototype;if (CLASS.__defined__) {this._init.apply(this, arguments);return;}CLASS.__defined__ = true;CLASS.__horizontal__ = "horizontal";CLASS.__both__ = "both";CLASS.__dvertical__ = "vertical";CLASS.__none__ = "none";CLASS.__center__ = "center";CLASS.__north__ = "north";CLASS.__northeast__ = "northeast";CLASS.__east__ = "east";CLASS.__southeast__ = "southeast";CLASS.__south__ = "south";CLASS.__southwest__ = "southwest";CLASS.__west__ = "west";CLASS.__page_start__ = "page_start";CLASS.__page_end__ = "page_end";CLASS.__line_start__ = "line_start";CLASS.__line_end__ = "line_end";CLASS.__first_line_end__ = "first_line_end";CLASS.__last_line_start__ = "last_line_start";CLASS.__last_line_end__ = "last_line_end";thi$._init = function (gridx, gridy, gridwidth, gridheight, weightx, weighty, ipadx, ipady, anchor, fill, insets) {var Class = js.lang.Class;this.gridx = gridx;this.gridy = gridy;this.gridwidth = Class.typeOf(gridwidth) == "number" ? gridwidth : 1;this.gridheight = Class.typeOf(gridheight) == "number" ? gridheight : 1;this.weightx = Class.typeOf(weightx) == "number" ? weightx : 0;this.weighty = Class.typeOf(weighty) == "number" ? weighty : 0;this.ipadx = Class.typeOf(ipadx) == "number" ? ipadx : 0;this.ipady = Class.typeOf(ipady) == "number" ? ipady : 0;this.anchor = Class.typeOf(anchor) == "number" ? anchor : 10;this.minWidth = this.minHeight = 0;this.insets = Class.typeOf(insets) == "object" ? insets : {top:0, bottom:0, left:0, right:0};this.fill = Class.typeOf(fill) == "string" ? fill : CLASS.__both__;this.anchor = Class.typeOf(anchor) == "string" ? anchor : CLASS.__center__;};this._init.apply(this, arguments);}.$extend(js.lang.Object);js.awt.GridBagLayoutInfo = function (width, height) {this.width = width;this.height = height;this.startx = 0;this.starty = 0;this.minWidth = [];this.minHeight = [];this.weightX = [];this.weightY = [];}.$extend(js.lang.Object);