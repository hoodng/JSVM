$package("js.awt");js.awt.FieldSpinner = function (def, Runtime) {var CLASS = js.awt.FieldSpinner, thi$ = CLASS.prototype;if (CLASS.__defined__) {this._init.apply(this, arguments);return;}CLASS.__defined__ = true;var Class = js.lang.Class, Event = js.util.Event, System = J$VM.System, MQ = J$VM.MQ;thi$.getMsgType = function () {return "js.awt.event.FieldEvent";};thi$.setFormater = function (formater) {this.formater = formater;};thi$.getFormater = function () {return this.formater;};thi$.setPos = function (index) {this.spinner.setPos(index);_setText.call(this, this.getPos());};thi$.getPos = function () {return this.spinner.getPos();};thi$.initialize = function (lower, upper, index) {this.spinner.setRange(lower, upper);this.setPos(index);};var _setText = function (pos) {var formater = this.getFormater(), label = this.label;if (formater) {label.setText(formater.format(pos));} else {label.setText(pos + "");}};var _onSpinnerEvent = function (e) {var data = e.getData();_setText.call(this, data.pos);if (e.getType() == "changed") {e.setEventTarget(this);this.notifyPeer(this.getMsgType(), e);}};var _createElements = function (def) {var R = this.Runtime(), label, spinner;label = new js.awt.Label({className:this.className + "_label", id:"label", rigid_w:false, editable:def.editable}, R);this.addComponent(label);spinner = new (Class.forName("js.awt.Spinner"))({id:"spinner", rigid_h:false, cyclic:def.cyclic, accel:def.accel, direction:1}, R);this.addComponent(spinner);this.initialize(def.lower, def.upper, def.index);spinner.setPeerComponent(this);MQ.register(spinner.getMsgType(), this, _onSpinnerEvent);};thi$._init = function (def, Runtime) {if (def == undefined) {return;}def.classType = def.classType || "js.awt.FieldSpinner";def.className = def.className || "jsvm_fieldspinner";arguments.callee.__super__.apply(this, arguments);_createElements.call(this, def);}.$override(this._init);this._init.apply(this, arguments);}.$extend(js.awt.HBox);