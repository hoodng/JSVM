J$VM = new function () {this.__product__ = "J$VM";this.__version__ = "0.9.${build}";this.env = {j$vm_log:false, j$vm_ajax_nocache:true, j$vm_ajax_timeout:600000, j$vm_timeslice:20, j$vm_threshold:45, j$vm_longpress:90};this.env.j$vm_isworker = function () {try {return (window) ? false : true;}catch (x) {return true;}}();js = {lang:{}};Function.prototype.$extend = function (superC) {var proto;if (typeof superC === "function") {proto = this.prototype = new (superC)();proto.constructor = superC;} else {if (typeof superC === "object") {proto = this.prototype = superC;proto.constructor = superC.constructor;} else {throw new Error("Parameter 'superC' must be a function or object");}}return this;};Function.prototype.$implements = function (superCs) {var proto = this.prototype, superC, imps = proto.__imps__ = [];for (var i = 0, len = arguments.length; i < len; i++) {superC = arguments[i];if (typeof superC == "function") {imps.push(superC);superC.$decorate(proto);}}return this;};Function.prototype.$decorate = function (o, replaceMap) {if (o === undefined) {throw new Error("Parameter 'o' must be an object");}var p, proto = this.prototype;if (this.__defined__ == undefined) {new (this)();}replaceMap = replaceMap || {};for (p in proto) {if (proto.hasOwnProperty(p) && "constructor" != p && "__imps__" != p && (!o.hasOwnProperty(p) || replaceMap[p] == true)) {o[p] = proto[p];}}return o;};Function.prototype.$bind = function (thi$) {var fn = this, args = Array.prototype.slice.call(arguments, 1);return function () {var $args = args.slice(0);$args = Array.prototype.slice.call(arguments, 0).concat($args);return fn.apply(thi$, $args);};};Function.prototype.$listen = function (thi$, eClass) {var fn = this, args = Array.prototype.slice.call(arguments, 2);var agent = function (e) {var $args = args.slice(0);var _e = (typeof eClass === "function") ? new (eClass)(e) : e;$args.unshift(_e);return fn.apply(thi$, $args);};agent.__host__ = fn;return agent;};Function.prototype.$delay = function (thi$, timeout) {var fn = this, args = Array.prototype.slice.call(arguments, 2);fn.__timer__ = fn.__timer__ || [];var _timer = setTimeout(function () {fn.$clearTimer(_timer);fn.apply(thi$, args);}, timeout);fn.__timer__.push(_timer);return _timer;};Function.prototype.$clearTimer = function (timer) {var timers = this.__timer__, index = -1, ret = false;if (timers && timers.length > 0) {if (timer != undefined && timer != null) {for (var i = 0, len = timers.length; i < len; i++) {if (timers[i] === timer) {index = i;break;}}if (index != -1) {timers.splice(index, 1);clearTimeout(timer);ret = true;}} else {clearTimeout(timers.shift());ret = true;}}return ret;};Function.prototype.$override = function (func) {this.__super__ = func;return this;};Function.prototype.$forEach = function (thi$, set) {var fn = this, i, len, $args = Array.prototype.slice.call(arguments, 2);switch (js.lang.Class.typeOf(set)) {case "array":for (i = 0, len = set.length; i < len; i++) {try {fn.apply(thi$, $args.concat(set[i], i, set));}catch (x) {if ("break" === x) {break;}}}break;case "object":for (i in set) {try {fn.apply(thi$, $args.concat(set[i], i, set));}catch (x) {if ("break" === x) {break;}}}break;default:break;}};Function.prototype.$map = function (thi$, set) {var fn = this, ret = js.lang.Class.isArray(set) ? [] : {}, $args = Array.prototype.slice.call(arguments, 2);(function (v, i, set) {ret[i] = fn.apply(thi$, $args.concat(v, i, set));}).$forEach(thi$, set);return ret;};Function.prototype.$filter = function (thi$, set) {var fn = this, isArray = js.lang.Class.isArray(set), ret = isArray ? [] : {}, $args = Array.prototype.slice.call(arguments, 2);(function (v, i, set) {if (fn.apply(thi$, $args.concat(v, i, set))) {isArray ? ret.push(v) : ret[i] = v;}}).$forEach(thi$, set);return ret;};Function.prototype.$some = function (thi$, set) {var fn = this, ret = false, $args = Array.prototype.slice.call(arguments, 2);(function (v, i, set) {if (fn.apply(thi$, $args.concat(v, i, set))) {ret = true;throw "break";}}).$forEach(thi$, set);return ret;};Function.prototype.$every = function (thi$, set) {var fn = this, ret = true, $args = Array.prototype.slice(arguments, 2);(function (v, i, set) {if (fn.apply(thi$, $args.concat(v, i, set))) {ret = false;throw "break";}}).$forEach(thi$, set);return ret;};}();